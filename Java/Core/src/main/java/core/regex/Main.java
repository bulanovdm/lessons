package core.regex;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * https://javarush.ru/groups/posts/regulyarnye-vyrazheniya-v-java
 * https://javarush.ru/groups/posts/154-reguljarnihe-vihrazhenija-v-java-chastjh-2
 *
 * Метасимволы  <([{\^-=$!|]})?*+.>
 *
 * Метасимволы для поиска совпадений границ строк или текста
 *
 * ^	начало строки
 * $	конец строки
 * \b	граница слова
 * \B	не граница слова
 * \A	начало ввода
 * \G	конец предыдущего совпадения
 * \Z	конец ввода
 * \z	конец ввода
 *
 * Метасимволы для поиска символьных классов
 *
 * \d	цифровой символ
 * \D	нецифровой символ
 * \s	символ пробела
 * \S	непробельный символ
 * \w	буквенно-цифровой символ или знак подчёркивания
 * \W	любой символ, кроме буквенного, цифрового или знака подчёркивания
 * .	любой символ
 *
 * Метасимволы для поиска символов редактирования текста
 *
 * \t	символ табуляции
 * \n	символ новой строки
 * \r	символ возврата каретки
 * \f	переход на новую страницу
 * \\u 0085	символ следующей строки
 * \\u 2028	символ разделения строк
 * \\u 2029	символ разделения абзацев
 *
 * Метасимволы для группировки символов
 *
 * [абв]	любой из перечисленных (а,б, или в)
 * [^абв]	любой, кроме перечисленных (не а,б, в)
 * [a-zA-Z]	слияние диапазонов (латинские символы от a до z без учета регистра )
 * [a-d[m-p]]	объединение символов (от a до d и от m до p)
 * [a-z&&[def]]	пересечение символов (символы d,e,f)
 * [a-z&&[^bc]]	вычитание символов (символы a, d-z)
 *
 * Метасимволы для обозначения количества символов – квантификаторы. Квантификатор всегда следует после символа
 * или группы символов.
 *
 * ?	один или отсутствует
 * *	ноль или более раз
 * +	один или более раз
 * {n}	n раз
 * {n,}	n раз и более
 * {n,m}	не менее n раз и не более m раз
 *
 * "А.+а"  жадный режим
 * "А.+?а"  ленивый режим - ищется самое короткое совпадение в тексте
 */
public class Main {

    public static void main(String[] args) {

        Pattern regex = Pattern.compile("regex");
        Pattern regex2 = Pattern.compile("regex", 0);
        Pattern regex3 = Pattern.compile("regex", Pattern.CASE_INSENSITIVE);

        //жадный режим
        String text = "Егор Алла Александр";
        Pattern pattern = Pattern.compile("А.+а");
        Matcher matcher = pattern.matcher(text);
        while (matcher.find()) {
            System.out.println(matcher.group(0)); //Алла Алекса
        }

        System.out.println(Pattern.matches("А.+а","Алла"));//true
        System.out.println(Pattern.matches("А.+а","Егор Алла Александр"));//false

        boolean result = "+12343454556".matches("(\\+*)\\d{11}");
        System.out.println("result = " + result);

    }
}
