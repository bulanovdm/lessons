package interfaces;

import javax.jms.Connection;
import javax.jms.JMSException;

/**
 * {@link Connection}
 *
 * Connection - это активное соединение клиента с его JMS-провайдером.
 *
 * Соединение служит нескольким целям:
 * Он инкапсулирует открытое соединение с провайдером JMS. Обычно он представляет собой открытый сокет TCP / IP между
 *      клиентом и программным обеспечением поставщика услуг.
 * При его создании происходит аутентификация клиента.
 * Здесь можно указать уникальный идентификатор клиента.
 * Он предоставляет объект ConnectionMetaData.
 *
 * Большинство клиентов будут делать все свои сообщения с помощью одного подключения.
 * Когда соединение создано, оно находится в stopped mode. Это означает, что сообщения не доставляются.
 *
 * Обычно соединение оставляют в остановленном режиме до завершения установки (то есть до тех пор, пока не будут созданы
 * все потребители сообщений). В этот момент клиент вызывает метод начала соединения, и сообщения начинают поступать к
 * потребителям соединения. Это соглашение об установке сводит к минимуму любую путаницу клиента, которая может возникнуть
 * в результате асинхронной доставки сообщений, пока клиент все еще находится в процессе настройки.
 *
 *
 * Методы:
 * createConnectionConsumer() - Создает ConnectionConsumer для этого соединения. Это экспертное средство, не используемое
 *      обычными клиентами JMS. Этот метод нельзя использовать в веб-приложениях Java EE или EJB
 *
 * createSession() - Поведение создаваемого сеанса зависит от того, вызывается ли этот метод в среде Java SE, в клиентском
 *      контейнере приложения Java EE или в веб-контейнере Java EE или контейнере EJB. Если этот метод вызывается в веб-контейнере
 *      Java EE или контейнере EJB, поведение сеанса также зависит от того, выполняется ли активная транзакция JTA или нет.
 *
 * In a Java SE environment or in the Java EE application client container:
 * Если для sessionMode установлено значение JMSContext.SESSION_TRANSACTED, то сеанс будет использовать локальную транзакцию,
 *      которая впоследствии может быть зафиксирована или откатана путем вызова методов фиксации или отката JMSContext.
 *
 * Если для sessionMode задано любое из JMSContext.CLIENT_ACKNOWLEDGE, JMSContext.AUTO_ACKNOWLEDGE или JMSContext.DUPS_OK_ACKNOWLEDGE.
 *      тогда сеанс не будет передаваться, и сообщения, полученные этим сеансом, будут подтверждены в соответствии со значением
 *      sessionMode. Для определения значения этих режимов подтверждения см. Ссылки ниже.
 *
 * In a Java EE web or EJB container, when there is an active JTA transaction in progress:
 * Аргумент sessionMode игнорируется. Сеанс будет участвовать в транзакции JTA и будет зафиксирован или откатан, когда эта
 *      транзакция будет зафиксирована или откатана, а не путем вызова методов фиксации или отката JMSContext. Поскольку
 *      аргумент игнорируется, разработчикам рекомендуется использовать createContext (String userName, String password)
 *      вместо этого метода.
 *
 * In the Java EE web or EJB container, when there is no active JTA transaction in progress:
 *      Аргумент ПодтверждениеModeMode должен быть установлен в любой из JMSContext.AUTO_ACKNOWLEDGE или JMSContext.DUPS_OK_ACKNOWLEDGE.
 *      Сеанс не будет передаваться, и сообщения, полученные этим сеансом, будут автоматически подтверждаться в соответствии
 *      со значением acceptledgeMode. Для определения значения этих режимов подтверждения см. Ссылки ниже. Значения
 *      JMSContext.SESSION_TRANSACTED и JMSContext.CLIENT_ACKNOWLEDGE могут не использоваться.
 *
 * getClientID() - Получает идентификатор клиента для этого соединения. Он либо предварительно настраивается администратором
 *      в объекте ConnectionFactory, либо динамически назначается приложением, вызывая метод setClientID.
 *
 * setClientID() - Предпочтительный способ присвоения клиентского идентификатора JMS-клиента заключается в том, чтобы он
 *      был сконфигурирован в объекте ConnectionFactory для конкретного клиента и прозрачно назначен объекту Connection,
 *      который он создает.
 *
 * start() - Запускает (или перезапускает) доставку соединения входящими сообщениями. Вызов, чтобы начать соединение,
 *      которое уже было начато, игнорируется.
 *
 * stop() - Временно останавливает доставку соединения входящих сообщений. Когда соединение прекращается, доставка всем
 *      потребителям сообщения соединения запрещается: синхронный блок приема и сообщения не доставляются слушателям
 *      сообщений. Остановка соединения не влияет на его способность отправлять сообщения.
 *
 *
 */
public class Connection_ {

    public static void main(String[] args) throws JMSException {
        Connection connection = null;
        connection.createConnectionConsumer(null,null,null,0);
        connection.createSession();
        connection.getClientID();
        connection.setClientID("");
        connection.stop();

    }
}
