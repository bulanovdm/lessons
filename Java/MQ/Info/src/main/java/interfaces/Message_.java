package interfaces;

import org.apache.activemq.command.ActiveMQTextMessage;

import javax.jms.DeliveryMode;
import javax.jms.Destination;
import javax.jms.JMSException;
import javax.jms.Message;


/**
 * {@link Message}
 *
 * Сообщения JMS состоят из следующих частей:
 * Заголовок - все сообщения поддерживают одинаковый набор полей заголовка. Поля заголовка содержат значения, используемые
 *      клиентами и поставщиками для идентификации и маршрутизации сообщений.
 * Свойства - каждое сообщение содержит встроенную функцию поддержки значений свойств, определенных приложением. Свойства
 *      обеспечивают эффективный механизм для поддержки определяемой приложением фильтрации сообщений.
 * Тело - API-интерфейс JMS определяет несколько типов тела сообщения, которые охватывают большинство используемых в
 *      настоящее время стилей обмена сообщениями.
 *
 * JMS API определяет пять типов тела сообщения:
 * Stream - тело сообщения объекта StreamMessage содержит поток примитивных значений на языке программирования Java
 *      («примитивы Java»). Заполняется и читается последовательно.
 * Map - тело сообщения объекта MapMessage содержит набор пар имя-значение, где имена являются объектами String, а
 *      значения являются примитивами Java. Записи могут быть доступны последовательно или случайным образом по имени.
 *      Порядок записей не определен.
 * Text - тело сообщения объекта TextMessage содержит объект java.lang.String. Этот тип сообщения может использоваться
 *      для транспортировки текстовых сообщений и сообщений XML.
 * Object - Тело сообщения объекта ObjectMessage содержит Сериализуемый Java-объект.
 * Bytes - тело сообщения объекта BytesMessage содержит поток неинтерпретированных байтов. Этот тип сообщения предназначен
 *      для буквального кодирования тела в соответствии с существующим форматом сообщения. Во многих случаях возможно
 *      использование одного из других типов телосложения, которые легче использовать. Хотя JMS API позволяет использовать
 *      свойства сообщений с байтовыми сообщениями, они обычно не используются, так как включение свойств может повлиять
 *      на формат.
 *
 * Поле заголовка JMSCorrelationID используется для связи одного сообщения с другим. Обычно оно связывает ответное сообщение
 *      с запрашивающим сообщением.
 * Свойства позволяют приложению с помощью селекторов сообщений выбирать или фильтровать провайдера JMS от его имени,
 *      используя критерии, специфичные для приложения.
 * Значения свойств могут быть boolean, byte, short, int, long, float, double, and String, и Метод setObjectProperty
 *      принимает обертки примитивов.
 *
 * JMS API резервирует префикс имени свойства JMSX для свойств, определенных JMS.
 *
 * JMSXGroupID и JMSXGroupSeq являются стандартными свойствами, которые клиенты должны использовать, если они хотят
 *      группировать сообщения.
 *
 * Режимы доставки, поддерживаемые JMS API, являются PERSISTENT и NON_PERSISTENT. Клиент помечает сообщение как постоянное,
 *      если ему кажется, что у приложения возникнут проблемы, если сообщение будет потеряно при передаче. Клиент помечает
 *      сообщение как непостоянное, если случайное потерянное сообщение допустимо. Режим доставки охватывает только
 *      транспортировку сообщения к месту назначения.
 *
 *
 * Методы Message:
 *
 * acknowledge() - Подтверждает получение всех сообщений в сессии этого сообщения.
 * clearBody() - Очистка тела сообщения, не очищает заголовки и свойства.
 * getBody() - Возвращает тело сообщения как объект указанного типа.
 * clearProperties() - Очищает свойства сообщения. Поля заголовка и тело сообщения не очищаются.
 * getJMSCorrelationID() -
 * getJMSDeliveryMode() - {@link DeliveryMode} PERSISTENT или NON_PERSISTENT
 * getJMSDeliveryTime() - Время доставки сообщения - это самое раннее время, когда поставщик JMS может доставить сообщение
 *      потребителю. Поставщик не должен доставлять сообщения до истечения времени доставки.
 * getJMSDestination() - {@link Destination} - API JMS не определяет стандартный синтаксис адреса.
 * getJMSExpiration() - Время истечения срока действия сообщения.
 * getJMSMessageID() - Это строковое значение, которое должно функционировать как уникальный ключ для идентификации сообщений в хранилище.
 * getJMSPriority() - JMS API определяет десять уровней значения приоритета, где 0 - самый низкий приоритет, а 9 - самый высокий.
 * getJMSReplyTo() - Получает объект Destination, на который должен быть отправлен ответ на это сообщение.
 * getJMSTimestamp() - Поле заголовка JMSTimestamp содержит время, когда сообщение было передано провайдеру для отправки.
 * getPropertyNames() - Возвращает перечисление всех имен свойств.
 * isBodyAssignableTo(Class c) - Возвращает, может ли тело сообщения быть назначено указанному типу
 *
 */
public class Message_ {

    public static void main(String[] args) throws JMSException {
        Message message = new ActiveMQTextMessage();
        message.acknowledge();
        message.clearBody();
        message.getBody(String.class);
        message.clearProperties();
        message.getJMSDeliveryMode();
        message.getJMSDeliveryTime();
        message.getJMSCorrelationID();


    }
}
