docker images - показать доступный список образов

docker build -t <имя> <каталог откуда собирать образ (.)> - создает image используя dockerfile
    -t <имя> - название образа (тег)
    . - сделать образ из текущей директории (в ней должен быть dockerfile)

docker run <имя образа> - создает и запускает контейнер
    --name <имя> - задать имя контейнера
    -d - демон, будет работать в фоне, не занимая консоль
    --rm - после остановки контейнера или после завершения работы контейнер удаляется
    -p <порт на локальной машине>:<порт в образе> - проброс порта
    -e <имя переменной>=<значение переменной> - задать переменную окружения
    -v <абсолютный путь к директории на локальной машине или имя volume>:<абсолютный путь к директории в образе> - смонтировать папки
    -i - переключает команду в интерактивный режим и открывает STDIN
    -t - создает псевдотерминал tty

docker stop <имя контейнера или ID контейнера> - остановить контейнер
    docker stop $(docker ps -qa) - остановить все контейнеы

docker rm <имя контейнера или ID контейнера> - удалить контейнер
    docker rm $(docker ps -qa) - удалить все контейнеры

docker cp <откуда> <куда>- копирует файлы. Путь в контейнере указывается <Имя контейнера:Путь>

docker login -

docker push <имя образа> -
    если в docker hub создаётся репозиторий my_servce_image под логином plekhanov его полное имя plekhanov/my_service_image
    для того чтобы запушить image в этот репозиторий, локальное имя образа должно быть plekhanov/my_service_image
    должно полностью совпадать с именем репозитория, по умолчанию тэг latest и его можно не указывать, но если есть тэг
    его указывать обязательно

docker pull <имя образа> -

docker ps - запущеные контейнеры
    -a - все контейнеры (включая не работающие)
    -q - выводит только id контейнеров

docker rmi <> - удалить образ
    docker rmi $(docker images -qa) - удалить все образы

docker volume ls - показать список volume

docker volume create <имя volume> - создать volume

docker tag <имя образа:тэг> <новое имя для образа:тэг>   создаёт новое имя образа (старое также остаётся)

docker commit - создать новый образ со всеми изменениями, выполненными в контейнере

docker diff - отличия в файловой системе в сравнении с базовым образом

docker exec <имя контейнера> <имя команды> - выполнить команду в указанном контейнере
    docker exec -it testContainer bash

docker commit <id контейнера> <новое имя обоаза (опционально)> - сохранить образ из контейнера.

docker cp - копировать файлы из/в контейнера на пк

docker save - сохранить образ в архив


