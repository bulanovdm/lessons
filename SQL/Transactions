https://ru.wikipedia.org/wiki/ACID

ACID - требования к транзакционной системе:

Atomicity — Атомарность
    Атомарность гарантирует, что никакая транзакция не будет зафиксирована в системе частично. Будут либо выполнены
    все её подоперации, либо не выполнено ни одной.

Consistency — Согласованность
     Каждая успешная транзакция фиксирует только допустимые результаты. Это условие является необходимым
     для поддержки четвёртого свойства.

Isolation — Изолированность
    Во время выполнения транзакции параллельные транзакции не должны оказывать влияния на её результат.

Durability — Долговечность
    Изменения, сделанные успешно завершённой транзакцией, должны остаться сохранёнными


//https://ru.wikipedia.org/wiki/%D0%A3%D1%80%D0%BE%D0%B2%D0%B5%D0%BD%D1%8C_%D0%B8%D0%B7%D0%BE%D0%BB%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8_%D1%82%D1%80%D0%B0%D0%BD%D0%B7%D0%B0%D0%BA%D1%86%D0%B8%D0%B9
Уровень изолированности транзакций - значение, определяющее, в какой мере в результате выполнения логически параллельных
    транзакций в СУБД допускается получение несогласованных данных

Проблемы параллельного доступа с использованием транзакций:

Потерянное обновление (lost update) — при одновременном изменении одного блока данных разными транзакциями
    теряются все изменения, кроме последнего;

«Грязное» чтение (dirty read) — чтение данных, добавленных или изменённых транзакцией, которая впоследствии
    не подтвердится (откатится);

Неповторяющееся чтение (non-repeatable read) — при повторном чтении в рамках одной транзакции ранее прочитанные
    данные оказываются изменёнными;

Фантомное чтение (phantom reads) — одна транзакция в ходе своего выполнения несколько раз выбирает множество
    строк по одним и тем же критериям. Другая транзакция в интервалах между этими выборками добавляет или удаляет строки
    или изменяет столбцы некоторых строк, используемых в критериях выборки первой транзакции, и успешно заканчивается.
    В результате получится, что одни и те же выборки в первой транзакции дают разные множества строк.

Уровни изоляции - Read uncommitted, Read committed, Repeatable read, Serializable.

Read uncommitted - гарантирует только отсутствие потерянных обновлений. При этом возможно считывание не только логически
    несогласованных данных, но и данных, изменения которых ещё не зафиксированы. Типичный способ реализации данного
    уровня изоляции — блокировка данных на время выполнения команды изменения (update выполняется последовательно).

Read committed - обеспечивается защита от «грязного» чтения. Реализации:
    Блокирование читаемых и изменяемых данных - пишущая транзакция блокирует изменяемые данные для читающих транзакций,
    работающих на уровне read committed или более высоком, до своего завершения, препятствуя, таким образом, «грязному»
    чтению, а данные, блокируемые читающей транзакцией, освобождаются сразу после завершения операции SELECT (таким
    образом, ситуация «неповторяющегося чтения» может возникать на данном уровне изоляции).

    Сохранение нескольких версий параллельно изменяемых строк - При каждом изменении строки СУБД создаёт новую версию
    этой строки, с которой продолжает работать изменившая данные транзакция, в то время как любой другой «читающей»
    транзакции возвращается последняя зафиксированная версия.

Repeatable read - Уровень, при котором читающая транзакция «не видит» изменения данных, которые были ею ранее прочитаны.
    При этом никакая другая транзакция не может изменять данные, читаемые текущей транзакцией, пока та не окончена.
    Блокировки в разделяющем режиме применяются ко всем данным, считываемым любой инструкцией транзакции, и сохраняются
    до её завершения. Это запрещает другим транзакциям изменять строки, которые были считаны незавершённой транзакцией.

Serializable - Самый высокий уровень изолированности; транзакции полностью изолируются друг от друга, каждая выполняется
    так, как будто параллельных транзакций не существует. Только на этом уровне параллельные транзакции не подвержены
    эффекту «фантомного чтения».